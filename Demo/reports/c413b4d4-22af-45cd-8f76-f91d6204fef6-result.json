{"name": "登录模块", "status": "failed", "statusDetails": {"message": "AttributeError: 'str' object has no attribute 'keys'", "trace": "self = <CallInfo when='call' exception: 'str' object has no attribute 'keys'>\nfunc = <function call_runtest_hook.<locals>.<lambda> at 0x1068f48c0>\nwhen = 'call'\n\n    def __init__(self, func, when):\n        #: context of invocation: one of \"setup\", \"call\",\n        #: \"teardown\", \"memocollect\"\n        self.when = when\n        self.start = time()\n        try:\n>           self.result = func()\n\n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/_pytest/runner.py:189: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   return CallInfo(lambda: ihook(item=item, **kwds), when=when)\n\n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/_pytest/runner.py:175: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <_HookCaller 'pytest_runtest_call'>, args = ()\nkwargs = {'item': <YamlTestItem '登录模块'>}, notincall = set()\n\n    def __call__(self, *args, **kwargs):\n        if args:\n            raise TypeError(\"hook calling supports only keyword arguments\")\n        assert not self.is_historic()\n        if self.argnames:\n            notincall = set(self.argnames) - set(['__multicall__']) - set(\n                kwargs.keys())\n            if notincall:\n                warnings.warn(\n                    \"Argument(s) {} which are declared in the hookspec \"\n                    \"can not be found in this hook call\"\n                    .format(tuple(notincall)),\n                    stacklevel=2,\n                )\n>       return self._hookexec(self, self._nonwrappers + self._wrappers, kwargs)\n\n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/pluggy/__init__.py:617: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <_pytest.config.PytestPluginManager object at 0x105551850>\nhook = <_HookCaller 'pytest_runtest_call'>\nmethods = [<pluggy.HookImpl object at 0x1067b58d0>, <pluggy.HookImpl object at 0x1068f3f50>, <pluggy.HookImpl object at 0x1068e6810>, <pluggy.HookImpl object at 0x1068e6610>]\nkwargs = {'item': <YamlTestItem '登录模块'>}\n\n    def _hookexec(self, hook, methods, kwargs):\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n>       return self._inner_hookexec(hook, methods, kwargs)\n\n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/pluggy/__init__.py:222: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhook = <_HookCaller 'pytest_runtest_call'>\nmethods = [<pluggy.HookImpl object at 0x1067b58d0>, <pluggy.HookImpl object at 0x1068f3f50>, <pluggy.HookImpl object at 0x1068e6810>, <pluggy.HookImpl object at 0x1068e6610>]\nkwargs = {'item': <YamlTestItem '登录模块'>}\n\n    self._inner_hookexec = lambda hook, methods, kwargs: \\\n        hook.multicall(\n            methods, kwargs,\n>           firstresult=hook.spec_opts.get('firstresult'),\n        )\n\n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/pluggy/__init__.py:216: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhook_impls = [<pluggy.HookImpl object at 0x1067b58d0>, <pluggy.HookImpl object at 0x1068f3f50>, <pluggy.HookImpl object at 0x1068e6810>, <pluggy.HookImpl object at 0x1068e6610>]\ncaller_kwargs = {'item': <YamlTestItem '登录模块'>}, firstresult = False\n\n    def _multicall(hook_impls, caller_kwargs, firstresult=False):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    \"hook call must provide argument %r\" % (argname,))\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)   # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n                        res = hook_impl.function(*args)\n                        if res is not None:\n                            results.append(res)\n                            if firstresult:  # halt further impl calls\n                                break\n            except BaseException:\n                excinfo = sys.exc_info()\n        finally:\n            if firstresult:  # first result hooks return a single value\n                outcome = _Result(results[0] if results else None, excinfo)\n            else:\n                outcome = _Result(results, excinfo)\n    \n            # run all wrapper post-yield blocks\n            for gen in reversed(teardowns):\n                try:\n                    gen.send(outcome)\n                    _raise_wrapfail(gen, \"has second yield\")\n                except StopIteration:\n                    pass\n    \n>           return outcome.get_result()\n\n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/pluggy/callers.py:201: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pluggy.callers._Result object at 0x10694f710>\n\n    def get_result(self):\n        \"\"\"Get the result(s) for this hook call.\n    \n            If the hook was marked as a ``firstresult`` only a single value\n            will be returned otherwise a list of results.\n            \"\"\"\n        __tracebackhide__ = True\n        if self._excinfo is None:\n            return self._result\n        else:\n            ex = self._excinfo\n            if _py3:\n>               raise ex[1].with_traceback(ex[2])\n\n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/pluggy/callers.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhook_impls = [<pluggy.HookImpl object at 0x1067b58d0>, <pluggy.HookImpl object at 0x1068f3f50>, <pluggy.HookImpl object at 0x1068e6810>, <pluggy.HookImpl object at 0x1068e6610>]\ncaller_kwargs = {'item': <YamlTestItem '登录模块'>}, firstresult = False\n\n    def _multicall(hook_impls, caller_kwargs, firstresult=False):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    \"hook call must provide argument %r\" % (argname,))\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)   # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n>                       res = hook_impl.function(*args)\n\n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/pluggy/callers.py:180: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nitem = <YamlTestItem '登录模块'>\n\n    def pytest_runtest_call(item):\n        _update_current_test_var(item, 'call')\n        try:\n>           item.runtest()\n\n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/_pytest/runner.py:106: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <YamlTestItem '登录模块'>\n\n    def runtest(self):\n        if gl.get_value(\"runtype\") == \"api\":\n            if isinstance(self.api_value, Scenario):\n                scenarios = self.api_value.test_list\n                for api in scenarios:\n                    for name, value in api.items():\n                        with pytest.allure.step(name):\n                            _var = case_run(name, self.api_name, value)\n    \n            elif isinstance(self.api_value, TestInfo):\n                with pytest.allure.step(self.caseName):\n                    _var = case_run(self.caseName, self.api_name, self.api_value)\n    \n        elif gl.get_value(\"runtype\") == \"ui\":\n            with pytest.allure.step(self.caseName):\n>               run_case_(gl.get_value(\"pageobject\"), self.caseInfo, gl.get_value(\"runconf\").type)\n\npytest_apitest.py:348: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nobjpage = {'登录': ['单击 | //*[@text=\"确认已满18周岁并同意\"] | 同意协议 ', '单击 | //*[@text=\"进入热拉世界\"] | 进入热拉世界', '单击 | 中国(+86) | 设置区号', '滚动到 | te...| //*[@text=\"请输入手机号\"] @@ $cell | 输入手机号', '键入 | //*[@text=\"请输入验证码\"] @@ $code | 输入验证码', '单击 | //*[@text=\"下一步\"] | 点击下一步']}\ncasesteps = {'登录': None, 'data': {'qh_code': 99, 'cell': 19999999163, 'code': 5678}}\nrun_type = 'app'\n\n    def run_case_(objpage, casesteps, run_type):\n        gl.get_value(\"log\").getlog().info(\"==========================开始执行用例==========================\")\n    \n        if run_type.lower() == \"app\":\n            run_ = APPRun(gl.get_value(\"d\"))\n        elif run_type.lower() == \"web\":\n            run_ = WebRun(gl.get_value(\"d\"))\n    \n        gl.get_value(\"log\").getlog().info(\"加载页面对象数据:{}\".format(json.dumps(objpage, ensure_ascii=False, indent=4)))\n    \n        gl.get_value(\"log\").getlog().info(\"加载用例数据:{}\".format(json.dumps(casesteps, ensure_ascii=False, indent=4)))\n    \n        print(4444444444444, casesteps)\n        for case_ in casesteps:\n            # print(\"开始执行用例: \", case_)\n            print(33333333333333333, case_)\n>           page_name = list(case_.keys())[0]\nE           AttributeError: 'str' object has no attribute 'keys'\n\nautotest/runner/run_ui.py:50: AttributeError"}, "steps": [{"name": "登录模块", "status": "passed", "statusDetails": {"message": "AttributeError: 'str' object has no attribute 'keys'\n", "trace": "  File \"/Users/rudolf_han/PycharmProjects/rela-autotest-framework/pytest_apitest.py\", line 348, in runtest\n    run_case_(gl.get_value(\"pageobject\"), self.caseInfo, gl.get_value(\"runconf\").type)\n  File \"/Users/rudolf_han/PycharmProjects/rela-autotest-framework/autotest/runner/run_ui.py\", line 50, in run_case_\n    page_name = list(case_.keys())[0]\n"}, "start": 1586173771937, "stop": 1586173771938}], "start": 1586173771937, "stop": 1586173771939, "uuid": "06563c67-cb2d-48fe-8c5e-13390f4633f3", "historyId": "2a3037b957432facf88504ceb7208f00", "fullName": "Demo.case.demo#登录模块", "labels": [{"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Demo.case.demo"}]}