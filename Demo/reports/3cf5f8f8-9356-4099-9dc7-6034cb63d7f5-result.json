{"name": "手机号登录", "status": "failed", "statusDetails": {"message": "AssertionError: 执行步骤输入手机号失败， 失败原因: exceptions must derive from BaseException", "trace": "self = <autotest.runner.runapp.APPRun object at 0x10ce77c90>\nstep = '键入 | //*[@text=\"请输入手机号\"] @@ $cell | 输入手机号'\n\n    def run_setup(self, step):\n        # selector 与 参数值 之间 通过 @@ 区分\n        kw = step.split(\"|\")[0].strip()\n        selector_value = step.split(\"|\")[1].strip()\n        desc = step.split(\"|\")[-1].strip()\n        gl.get_value(\"log\").getlog().info(\"开始执行步骤：{} \\n 使用关键字：{} \\n 选择器以及参数：{}\".format(desc, kw, selector_value))\n        with pytest.allure.step(desc):\n            if kw not in self.kwd:\n                gl.get_value(\"log\").getlog().error(\"{} -- 关键字未定义, 请检查\".format(kw))\n                assert False, \"{} -- 关键字未定义, 请检查\".format(kw)\n            if \"@@\" in selector_value:\n                selector__ = selector_value.split(\"@@\")[0].strip()\n                value = selector_value.split(\"@@\")[1].strip()\n            else:\n                value = selector_value\n                selector__ = selector_value\n            if kw in self.kw_selector:\n                gl.get_value(\"log\").getlog().info(\"关键字{} 的参数中包含选择器, 有选择器的关键字 {}\".format(kw, str(self.kw_selector)))\n                params_ = list(getattr(self.ub, self.kwd[kw]).__code__.co_varnames)\n                params_count = len(params_[1:])\n                gl.get_value(\"log\").getlog().info(\"关键字：{}, 需要传入参数：{}， 传入个数： {}\".format(kw, str(params_), str(params_count)))\n                try:\n                    if params_count > 1:\n                        allure.attach(\"执行步骤--{0}\".format(step), \"执行步骤\")\n>                       methodcaller(self.kwd[kw], selector__, value)(self.ub)\n\nautotest/runner/runapp.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <autotest.runner.ui2base.Ui2Base object at 0x10ce77cd0>\nselector = '//*[@text=\"请输入手机号\"]', new_value = '$cell'\n\n    def send_keys(self, selector, new_value):\n        # 判断页面是否加载完成\n        self.wait_for_ready_state_done()\n        # 根据输入的值 转为 响应的定位类型\n        element_by_ = self.selector_convert_type(selector)\n        # 先清空输入框clear\n    \n        if self.element_type.get(element_by_) == \"xpath\":\n            # xpath_convert_text\n>           self.get_xpath_text(selector, new_value)\n\nautotest/runner/ui2base.py:182: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <autotest.runner.ui2base.Ui2Base object at 0x10ce77cd0>\nselector = '//*[@text=\"请输入手机号\"]', new_value = '$cell'\n\n    def get_xpath_text(self, selector, new_value):\n        # last_xpath_text = gl.get_value(\"last_xpath\", None)\n        self.wait_for_ready_state_done()\n        gl.get_value(\"log\").getlog().info(self.get_page_source())\n        el = self.d.xpath(selector, self.get_page_source()).all()\n        if len(el) > 0:\n            last_match = el[0]\n            try:\n                gl.get_value(\"log\").getlog().info(\"开始执行==== {}, {} ====\".format(el, new_value))\n                self.d.set_fastinput_ime()\n                last_match.click()  # focus input-area\n                self.d.clear_text()\n                self.d.send_keys(new_value)\n            except Exception as E:\n                gl.get_value(\"log\").getlog().error(\"输入失败，失败原因：{}\".format(E))\n        else:\n            gl.get_value(\"log\").getlog().error(\"输入失败，失败原因：通过xpath ：{} 未定位到与元素\".format(selector))\n>           raise \"输入失败，失败原因：通过xpath ：{} 未定位到与元素\".format(selector)\nE           TypeError: exceptions must derive from BaseException\n\nautotest/runner/ui2base.py:207: TypeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <CallInfo when='call' exception: 执行步骤输入手机号失败， 失败原因: exceptions must derive from BaseException>\nfunc = <function call_runtest_hook.<locals>.<lambda> at 0x10ce22440>\nwhen = 'call'\n\n    def __init__(self, func, when):\n        #: context of invocation: one of \"setup\", \"call\",\n        #: \"teardown\", \"memocollect\"\n        self.when = when\n        self.start = time()\n        try:\n>           self.result = func()\n\n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/_pytest/runner.py:189: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   return CallInfo(lambda: ihook(item=item, **kwds), when=when)\n\n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/_pytest/runner.py:175: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <_HookCaller 'pytest_runtest_call'>, args = ()\nkwargs = {'item': <YamlTestItem '手机号登录'>}, notincall = set()\n\n    def __call__(self, *args, **kwargs):\n        if args:\n            raise TypeError(\"hook calling supports only keyword arguments\")\n        assert not self.is_historic()\n        if self.argnames:\n            notincall = set(self.argnames) - set(['__multicall__']) - set(\n                kwargs.keys())\n            if notincall:\n                warnings.warn(\n                    \"Argument(s) {} which are declared in the hookspec \"\n                    \"can not be found in this hook call\"\n                    .format(tuple(notincall)),\n                    stacklevel=2,\n                )\n>       return self._hookexec(self, self._nonwrappers + self._wrappers, kwargs)\n\n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/pluggy/__init__.py:617: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <_pytest.config.PytestPluginManager object at 0x10ba7e490>\nhook = <_HookCaller 'pytest_runtest_call'>\nmethods = [<pluggy.HookImpl object at 0x10cce8790>, <pluggy.HookImpl object at 0x10ce28790>, <pluggy.HookImpl object at 0x10ce24ed0>, <pluggy.HookImpl object at 0x10ce350d0>]\nkwargs = {'item': <YamlTestItem '手机号登录'>}\n\n    def _hookexec(self, hook, methods, kwargs):\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n>       return self._inner_hookexec(hook, methods, kwargs)\n\n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/pluggy/__init__.py:222: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhook = <_HookCaller 'pytest_runtest_call'>\nmethods = [<pluggy.HookImpl object at 0x10cce8790>, <pluggy.HookImpl object at 0x10ce28790>, <pluggy.HookImpl object at 0x10ce24ed0>, <pluggy.HookImpl object at 0x10ce350d0>]\nkwargs = {'item': <YamlTestItem '手机号登录'>}\n\n    self._inner_hookexec = lambda hook, methods, kwargs: \\\n        hook.multicall(\n            methods, kwargs,\n>           firstresult=hook.spec_opts.get('firstresult'),\n        )\n\n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/pluggy/__init__.py:216: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhook_impls = [<pluggy.HookImpl object at 0x10cce8790>, <pluggy.HookImpl object at 0x10ce28790>, <pluggy.HookImpl object at 0x10ce24ed0>, <pluggy.HookImpl object at 0x10ce350d0>]\ncaller_kwargs = {'item': <YamlTestItem '手机号登录'>}, firstresult = False\n\n    def _multicall(hook_impls, caller_kwargs, firstresult=False):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    \"hook call must provide argument %r\" % (argname,))\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)   # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n                        res = hook_impl.function(*args)\n                        if res is not None:\n                            results.append(res)\n                            if firstresult:  # halt further impl calls\n                                break\n            except BaseException:\n                excinfo = sys.exc_info()\n        finally:\n            if firstresult:  # first result hooks return a single value\n                outcome = _Result(results[0] if results else None, excinfo)\n            else:\n                outcome = _Result(results, excinfo)\n    \n            # run all wrapper post-yield blocks\n            for gen in reversed(teardowns):\n                try:\n                    gen.send(outcome)\n                    _raise_wrapfail(gen, \"has second yield\")\n                except StopIteration:\n                    pass\n    \n>           return outcome.get_result()\n\n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/pluggy/callers.py:201: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pluggy.callers._Result object at 0x10ce77390>\n\n    def get_result(self):\n        \"\"\"Get the result(s) for this hook call.\n    \n            If the hook was marked as a ``firstresult`` only a single value\n            will be returned otherwise a list of results.\n            \"\"\"\n        __tracebackhide__ = True\n        if self._excinfo is None:\n            return self._result\n        else:\n            ex = self._excinfo\n            if _py3:\n>               raise ex[1].with_traceback(ex[2])\n\n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/pluggy/callers.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhook_impls = [<pluggy.HookImpl object at 0x10cce8790>, <pluggy.HookImpl object at 0x10ce28790>, <pluggy.HookImpl object at 0x10ce24ed0>, <pluggy.HookImpl object at 0x10ce350d0>]\ncaller_kwargs = {'item': <YamlTestItem '手机号登录'>}, firstresult = False\n\n    def _multicall(hook_impls, caller_kwargs, firstresult=False):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    \"hook call must provide argument %r\" % (argname,))\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)   # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n>                       res = hook_impl.function(*args)\n\n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/pluggy/callers.py:180: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nitem = <YamlTestItem '手机号登录'>\n\n    def pytest_runtest_call(item):\n        _update_current_test_var(item, 'call')\n        try:\n>           item.runtest()\n\n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/_pytest/runner.py:106: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <YamlTestItem '手机号登录'>\n\n    def runtest(self):\n        if gl.get_value(\"runtype\") == \"api\":\n            if isinstance(self.api_value, Scenario):\n                scenarios = self.api_value.test_list\n                for api in scenarios:\n                    for name, value in api.items():\n                        with pytest.allure.step(name):\n                            _var = case_run(name, self.api_name, value)\n    \n            elif isinstance(self.api_value, TestInfo):\n                with pytest.allure.step(self.caseName):\n                    _var = case_run(self.caseName, self.api_name, self.api_value)\n    \n        elif gl.get_value(\"runtype\") == \"ui\":\n            with pytest.allure.step(self.caseName):\n>               run_case_(gl.get_value(\"pageobject\"), self.caseInfo, gl.get_value(\"runconf\").type)\n\npytest_apitest.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nobjpage = {'登录': ['单击 | //*[@text=\"确认已满18周岁并同意\"] | 同意协议 ', '单击 | //*[@text=\"进入热拉世界\"] | 进入热拉世界', '单击 | 中国(+86) | 设置区号', '滚动到 | te...| //*[@text=\"请输入手机号\"] @@ $cell | 输入手机号', '键入 | //*[@text=\"请输入验证码\"] @@ $code | 输入验证码', '单击 | //*[@text=\"下一步\"] | 点击下一步']}\ncasesteps = [{'登录': None, 'data': {'qh_code': 99, 'cell': 19999999163, 'code': 5678}}]\nrun_type = 'app'\n\n    def run_case_(objpage, casesteps, run_type):\n        gl.get_value(\"log\").getlog().info(\"==========================开始执行用例==========================\")\n    \n        if run_type.lower() == \"app\":\n            run_ = APPRun(gl.get_value(\"d\"))\n        elif run_type.lower() == \"web\":\n            run_ = WebRun(gl.get_value(\"d\"))\n    \n        gl.get_value(\"log\").getlog().info(\"加载页面对象数据:{}\".format(json.dumps(objpage, ensure_ascii=False, indent=4)))\n    \n        gl.get_value(\"log\").getlog().info(\"加载用例数据:{}\".format(json.dumps(casesteps, ensure_ascii=False, indent=4)))\n    \n        for case_ in casesteps:\n            # print(\"开始执行用例: \", case_)\n            page_name = list(case_.keys())[0]\n            if page_name not in objpage:\n                gl.get_value(\"log\").getlog().error(\"页面对象未定义:{}\".format(page_name))\n                assert False\n            else:\n                # 获取用例对应的 执行步骤\n                case_step = objpage.get(page_name)\n                print(\"获取步骤:\", case_step)\n                #  重组页面步骤 组装成 exec 可执行的 string （valid= true, false == keyword 是否定义 ）\n                if case_.get(page_name):\n                    case_params = dict(case_.get(page_name).get(\"data\", {}),\n                                       **case_.get(page_name).get(\"assert\", {}))\n                    gl.get_value(\"log\").getlog().info(\"参数与断言组合值:{}\".format(json.dumps(case_params, ensure_ascii=False, indent=4)))\n                else:\n                    case_params = {}\n                # 连接相关信息\n                # case_params[\"conn_info\"] = {\"conn_obj\": var.connect_obj}\n    \n                for step in case_step:\n                    step = Template(step).safe_substitute(case_params)\n                    gl.get_value(\"log\").getlog().info(\"重新处理后的步骤:{}\".format(step))\n>                   run_.run_setup(step)\n\nautotest/runner/run_ui.py:69: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <autotest.runner.runapp.APPRun object at 0x10ce77c90>\nstep = '键入 | //*[@text=\"请输入手机号\"] @@ $cell | 输入手机号'\n\n    def run_setup(self, step):\n        # selector 与 参数值 之间 通过 @@ 区分\n        kw = step.split(\"|\")[0].strip()\n        selector_value = step.split(\"|\")[1].strip()\n        desc = step.split(\"|\")[-1].strip()\n        gl.get_value(\"log\").getlog().info(\"开始执行步骤：{} \\n 使用关键字：{} \\n 选择器以及参数：{}\".format(desc, kw, selector_value))\n        with pytest.allure.step(desc):\n            if kw not in self.kwd:\n                gl.get_value(\"log\").getlog().error(\"{} -- 关键字未定义, 请检查\".format(kw))\n                assert False, \"{} -- 关键字未定义, 请检查\".format(kw)\n            if \"@@\" in selector_value:\n                selector__ = selector_value.split(\"@@\")[0].strip()\n                value = selector_value.split(\"@@\")[1].strip()\n            else:\n                value = selector_value\n                selector__ = selector_value\n            if kw in self.kw_selector:\n                gl.get_value(\"log\").getlog().info(\"关键字{} 的参数中包含选择器, 有选择器的关键字 {}\".format(kw, str(self.kw_selector)))\n                params_ = list(getattr(self.ub, self.kwd[kw]).__code__.co_varnames)\n                params_count = len(params_[1:])\n                gl.get_value(\"log\").getlog().info(\"关键字：{}, 需要传入参数：{}， 传入个数： {}\".format(kw, str(params_), str(params_count)))\n                try:\n                    if params_count > 1:\n                        allure.attach(\"执行步骤--{0}\".format(step), \"执行步骤\")\n                        methodcaller(self.kwd[kw], selector__, value)(self.ub)\n                        gl.get_value(\"log\").getlog().info(\"执行步骤：{} 成功\".format(desc))\n                    else:\n                        allure.attach(\"执行步骤--{0}\".format(step), \"执行步骤\")\n                        methodcaller(self.kwd[kw], selector__)(self.ub)\n                        gl.get_value(\"log\").getlog().info(\"执行步骤：{} 成功\".format(desc))\n                except Exception as E:\n                    gl.get_value(\"log\").getlog().error(\"执行步骤{}失败， 失败原因: {}\".format(desc, str(E)))\n>                   assert False, \"执行步骤{}失败， 失败原因: {}\".format(desc, str(E))\nE                   AssertionError: 执行步骤输入手机号失败， 失败原因: exceptions must derive from BaseException\n\nautotest/runner/runapp.py:64: AssertionError"}, "steps": [{"name": "手机号登录", "status": "failed", "statusDetails": {"message": "AssertionError: 执行步骤输入手机号失败， 失败原因: exceptions must derive from BaseException\n", "trace": "  File \"/Users/rudolf_han/PycharmProjects/rela-autotest-framework/pytest_apitest.py\", line 346, in runtest\n    run_case_(gl.get_value(\"pageobject\"), self.caseInfo, gl.get_value(\"runconf\").type)\n  File \"/Users/rudolf_han/PycharmProjects/rela-autotest-framework/autotest/runner/run_ui.py\", line 69, in run_case_\n    run_.run_setup(step)\n  File \"/Users/rudolf_han/PycharmProjects/rela-autotest-framework/autotest/runner/runapp.py\", line 64, in run_setup\n    assert False, \"执行步骤{}失败， 失败原因: {}\".format(desc, str(E))\n"}, "steps": [{"name": "同意协议", "status": "passed", "attachments": [{"name": "执行步骤", "source": "4e64c657-4dfa-4a58-a21e-d8eb6f0eb753-attachment.attach"}], "start": 1586171297839, "stop": 1586171298867}, {"name": "进入热拉世界", "status": "passed", "attachments": [{"name": "执行步骤", "source": "338d41aa-9661-440e-9e33-8a1dee60ba94-attachment.attach"}], "start": 1586171298867, "stop": 1586171299852}, {"name": "设置区号", "status": "passed", "attachments": [{"name": "执行步骤", "source": "a8b025aa-9b28-4553-a300-fc2bd30fa3b8-attachment.attach"}], "start": 1586171299852, "stop": 1586171301618}, {"name": "滚动到指定位置", "status": "passed", "attachments": [{"name": "执行步骤", "source": "272f9f3c-3a5b-4dfb-bf82-c183cec7de45-attachment.attach"}], "start": 1586171301618, "stop": 1586171305184}, {"name": "点击手动填写", "status": "passed", "attachments": [{"name": "执行步骤", "source": "dbc30992-10d6-4183-9a58-f473ab1044c7-attachment.attach"}], "start": 1586171305185, "stop": 1586171306048}, {"name": "输入国家区号", "status": "passed", "attachments": [{"name": "执行步骤", "source": "de60036a-df3c-4e15-b297-ae356a43714e-attachment.attach"}], "start": 1586171306048, "stop": 1586171308516}, {"name": "点击确定", "status": "passed", "attachments": [{"name": "执行步骤", "source": "8f9d4b3e-602e-4bbf-adfb-451d1175b4df-attachment.attach"}], "start": 1586171308516, "stop": 1586171317673}, {"name": "输入手机号", "status": "failed", "statusDetails": {"message": "AssertionError: 执行步骤输入手机号失败， 失败原因: exceptions must derive from BaseException\n", "trace": "  File \"/Users/rudolf_han/PycharmProjects/rela-autotest-framework/autotest/runner/runapp.py\", line 64, in run_setup\n    assert False, \"执行步骤{}失败， 失败原因: {}\".format(desc, str(E))\n"}, "attachments": [{"name": "执行步骤", "source": "7641163b-8800-4bc4-aa0f-1e5d7e335a2d-attachment.attach"}], "start": 1586171317673, "stop": 1586171319437}], "start": 1586171297838, "stop": 1586171319440}], "start": 1586171297838, "stop": 1586171319444, "uuid": "d2f60275-a266-4aab-a0e7-0fe3de965d2e", "historyId": "7c2bf643163e480faf715d63aaa0161b", "fullName": "Demo.case.demo#手机号登录", "labels": [{"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Demo.case.demo"}]}